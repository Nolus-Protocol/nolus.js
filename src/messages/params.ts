// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: nolus/tax/v2/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "nolus.tax.v2";

/** Params defines the v2 parameters for the module. */
export interface Params {
  feeRate: number;
  baseDenom: string;
  dexFeeParams: DexFeeParams[];
  treasuryAddress: string;
}

/** Defines the accepted fees with corresponding min prices and profit addresses */
export interface DexFeeParams {
  profitAddress: string;
  acceptedDenomsMinPrices: DenomPrice[];
}

/** DenomPrice will be used to define accepted denoms, their min prices and their ticker. */
export interface DenomPrice {
  denom: string;
  /** ticker will only be used for a more readable format for the users */
  ticker: string;
  minPrice: string;
}

function createBaseParams(): Params {
  return { feeRate: 0, baseDenom: "", dexFeeParams: [], treasuryAddress: "" };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feeRate !== 0) {
      writer.uint32(8).int32(message.feeRate);
    }
    if (message.baseDenom !== "") {
      writer.uint32(18).string(message.baseDenom);
    }
    for (const v of message.dexFeeParams) {
      DexFeeParams.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.treasuryAddress !== "") {
      writer.uint32(34).string(message.treasuryAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.feeRate = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseDenom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dexFeeParams.push(DexFeeParams.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.treasuryAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      feeRate: isSet(object.feeRate) ? globalThis.Number(object.feeRate) : 0,
      baseDenom: isSet(object.baseDenom) ? globalThis.String(object.baseDenom) : "",
      dexFeeParams: globalThis.Array.isArray(object?.dexFeeParams)
        ? object.dexFeeParams.map((e: any) => DexFeeParams.fromJSON(e))
        : [],
      treasuryAddress: isSet(object.treasuryAddress) ? globalThis.String(object.treasuryAddress) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.feeRate !== 0) {
      obj.feeRate = Math.round(message.feeRate);
    }
    if (message.baseDenom !== "") {
      obj.baseDenom = message.baseDenom;
    }
    if (message.dexFeeParams?.length) {
      obj.dexFeeParams = message.dexFeeParams.map((e) => DexFeeParams.toJSON(e));
    }
    if (message.treasuryAddress !== "") {
      obj.treasuryAddress = message.treasuryAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.feeRate = object.feeRate ?? 0;
    message.baseDenom = object.baseDenom ?? "";
    message.dexFeeParams = object.dexFeeParams?.map((e) => DexFeeParams.fromPartial(e)) || [];
    message.treasuryAddress = object.treasuryAddress ?? "";
    return message;
  },
};

function createBaseDexFeeParams(): DexFeeParams {
  return { profitAddress: "", acceptedDenomsMinPrices: [] };
}

export const DexFeeParams: MessageFns<DexFeeParams> = {
  encode(message: DexFeeParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profitAddress !== "") {
      writer.uint32(10).string(message.profitAddress);
    }
    for (const v of message.acceptedDenomsMinPrices) {
      DenomPrice.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DexFeeParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDexFeeParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profitAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.acceptedDenomsMinPrices.push(DenomPrice.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DexFeeParams {
    return {
      profitAddress: isSet(object.profitAddress) ? globalThis.String(object.profitAddress) : "",
      acceptedDenomsMinPrices: globalThis.Array.isArray(object?.acceptedDenomsMinPrices)
        ? object.acceptedDenomsMinPrices.map((e: any) => DenomPrice.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DexFeeParams): unknown {
    const obj: any = {};
    if (message.profitAddress !== "") {
      obj.profitAddress = message.profitAddress;
    }
    if (message.acceptedDenomsMinPrices?.length) {
      obj.acceptedDenomsMinPrices = message.acceptedDenomsMinPrices.map((e) => DenomPrice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DexFeeParams>, I>>(base?: I): DexFeeParams {
    return DexFeeParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DexFeeParams>, I>>(object: I): DexFeeParams {
    const message = createBaseDexFeeParams();
    message.profitAddress = object.profitAddress ?? "";
    message.acceptedDenomsMinPrices = object.acceptedDenomsMinPrices?.map((e) => DenomPrice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDenomPrice(): DenomPrice {
  return { denom: "", ticker: "", minPrice: "" };
}

export const DenomPrice: MessageFns<DenomPrice> = {
  encode(message: DenomPrice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.ticker !== "") {
      writer.uint32(18).string(message.ticker);
    }
    if (message.minPrice !== "") {
      writer.uint32(26).string(message.minPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DenomPrice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenomPrice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ticker = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.minPrice = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DenomPrice {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      minPrice: isSet(object.minPrice) ? globalThis.String(object.minPrice) : "",
    };
  },

  toJSON(message: DenomPrice): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.ticker !== "") {
      obj.ticker = message.ticker;
    }
    if (message.minPrice !== "") {
      obj.minPrice = message.minPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DenomPrice>, I>>(base?: I): DenomPrice {
    return DenomPrice.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DenomPrice>, I>>(object: I): DenomPrice {
    const message = createBaseDenomPrice();
    message.denom = object.denom ?? "";
    message.ticker = object.ticker ?? "";
    message.minPrice = object.minPrice ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
